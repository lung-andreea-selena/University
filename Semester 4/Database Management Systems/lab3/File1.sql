use Stud_Org
GO
-- Dirty Reads--
BEGIN TRANSACTION 
UPDATE Student SET PointsContribution=7000 WHERE SId=200;
WAITFOR DELAY '00:00:05'
ROLLBACK TRANSACTION
INSERT INTO LoggingTable (operationType, executionTime, logMessage) VALUES('Dirty Reads', CURRENT_TIMESTAMP, 'Rollback successfully')



-- Non Repetable Reads 
--Doesn't work
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
BEGIN TRANSACTION
SELECT * FROM Student;
WAITFOR DELAY '00:00:06' 
SELECT * FROM Student;
COMMIT TRANSACTION
--Works
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
SELECT * FROM Student;
WAITFOR DELAY '00:00:10'
SELECT * FROM Student;
COMMIT TRANSACTION



-- Phantom Reads --
--Doesn't work
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION;
SELECT * FROM Student WHERE SId BETWEEN 200 AND 300;
WAITFOR DELAY '00:00:07';
SELECT * FROM Student WHERE SId BETWEEN 200 AND 300;
COMMIT TRAN;
--Works
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
BEGIN TRANSACTION;
SELECT * FROM Student WHERE SId BETWEEN 200 AND 300;
WAITFOR DELAY '00:00:07';
SELECT * FROM Student WHERE SId BETWEEN 200 AND 300;
COMMIT TRAN;
INSERT INTO LoggingTable(operationType, executionTime, logMessage) VALUES('PHANTOM READ INSERT', CURRENT_TIMESTAMP, 'Phantom Reads Succeeded')



--DeadLock--
SELECT * FROM Student
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRAN;
UPDATE Task SET StatusT='GOOD2' WHERE TId = 501;
WAITFOR DELAY '00:00:05';
UPDATE Student SET Telephone=222222 WHERE SId=200;
COMMIT TRAN;
INSERT INTO LoggingTable(operationType, executionTime, logMessage) VALUES('DEADLOCK', CURRENT_TIMESTAMP, 'First transaction')

