1.
a) Write a function to return the n-th element of a list, or NIL if such an element does not exist.
b) Write a function to check whether an atom E is a member of a list which is not necessarily linear.
c) Write a function to determine the list of all sublists of a given list, on any level. 
 A sublist is either the list itself, or any element that is a list, at any level. Example: 
 (1 2 (3 (4 5) (6 7)) 8 (9 10)) => 5 sublists :
 ( (1 2 (3 (4 5) (6 7)) 8 (9 10)) (3 (4 5) (6 7)) (4 5) (6 7) (9 10) )
d) Write a function to transform a linear list into a set.

a)
retn(lis,n) - nil, if l is vid
		 - l1, n=1
		 - retn(lis2...lisn,n+1)

 (defun retn(l n)
              (cond
		((null l) nil)
               ((equal n 1) (car l))
                (t (retn (cdr l)(- n 1)))
)
)

 (print( retn '(1 2 3 4 5 5 6) '6))

b)atome(l,E) -- nil if l is null or e is not an atom
		--atome(l1,E) if l1 este lista
		-- true, if E= l1

(defun atome(l E)
              (cond
               ((or (null l) (not (atom e))) nil)
               ((listp (car l)) (atome (car l) E))
               ((equal E (car l)) t)
		(t (atome (cdr l) E))
)
)
 (print (atome '(1 2 (3 (a 5) (6 7)) 8 (9 10)) 'a))

