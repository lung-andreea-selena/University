     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit 
     6                                  import exit msvcrt.dll  
     7                                  
     8                                  
     9                                  segment data use32 class=data
    10                                  ;1/a+200*b-c/(d+1)+x/a-e unsigned rep
    11                                  ;a,b-word; c,d-byte; e-doubleword; x-qword
    12 00000000 0200                    a dw 2
    13 00000002 0300                    b dw 3
    14 00000004 06                      c db 6
    15 00000005 01                      d db 1
    16 00000006 0400                    e dw 4
    17 00000008 0800000000000000        x dq 8
    18 00000010 <res 00000004>          y resd 1
    19                                  
    20                                  
    21                                  
    22                                  segment code use32 class=code
    23                                  start:
    24                                      ;1/a
    25 00000000 B800000000                  mov eax,0
    26 00000005 B001                        mov al,1
    27 00000007 B400                        mov ah,0 ;convert al->ax
    28 00000009 66BA0000                    mov dx,0 ;convert ax->dx:ax because a is word so deimpartitul needs to be dword
    29 0000000D 66F735[00000000]            div word [a];catul in ax si restul in dx
    30 00000014 A3[10000000]                mov [y],eax
    31                                      ;+200*b
    32 00000019 B800000000                  mov eax,0
    33 0000001E 66B8C800                    mov ax,200
    34 00000022 66F725[02000000]            mul word [b]; dx:ax=200*b
    35 00000029 6652                        push dx
    36 0000002B 6650                        push ax
    37 0000002D 58                          pop eax;dx:ax->eax
    38 0000002E 0105[10000000]              add [y],eax
    39                                      ;-c/(d+1)
    40 00000034 B800000000                  mov eax,0
    41 00000039 BB00000000                  mov ebx,0
    42 0000003E 8A1D[05000000]              mov bl,[d]
    43 00000044 80C301                      add bl,1
    44 00000047 A0[04000000]                mov al,[c]
    45 0000004C B400                        mov ah,0;al->ax we need c to be word because d is byte
    46 0000004E F6F3                        div bl;al catul si ah restul
    47 00000050 B400                        mov ah,0 ;convert al->ax
    48 00000052 66BA0000                    mov dx,0 ;convert ax->dx:ax
    49 00000056 6652                        push dx
    50 00000058 6650                        push ax
    51 0000005A 58                          pop eax;dx:ax->eax
    52 0000005B 2905[10000000]              sub [y],eax
    53                                      ;+x/a-e
    54 00000061 B800000000                  mov eax,0
    55 00000066 BA00000000                  mov edx,0
    56 0000006B 66A1[00000000]              mov ax,[a]
    57 00000071 66BA0000                    mov dx,0;ax->dx:ax
    58 00000075 6652                        push dx
    59 00000077 6650                        push ax
    60 00000079 58                          pop eax;dx:ax->eax
    61 0000007A 89C3                        mov ebx,eax
    62 0000007C A1[08000000]                mov eax,dword[x]
    63 00000081 8B15[0C000000]              mov edx, dword[x+4]
    64 00000087 F7F0                        div eax;eax catul si adx restul
    65 00000089 0105[10000000]              add [y],eax
    66 0000008F A1[06000000]                mov eax,[e]
    67 00000094 2905[10000000]              sub [y],eax
    68                                      
    69 0000009A 6A00                        push dword 0 
    70 0000009C FF15[00000000]              call [exit]
