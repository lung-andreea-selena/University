     1                                  bits 32 
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit 
     6                                  import exit msvcrt.dll  
     7                                  
     8                                  
     9                                  segment data use32 class=data
    10                                  ;(a*b-2*c*d)/(c-e)+x/a - signed rep
    11                                  ; a,b,c,d-byte; e-word; x-qword
    12                                  
    13 00000000 04                      a db 4
    14 00000001 05                      b db 5
    15 00000002 03                      c db 3
    16 00000003 02                      d db 2
    17 00000004 0100                    e dw 1
    18 00000006 0C00000000000000        x dq 12
    19 0000000E <res 00000004>          y resd 1;reserving a doubleword
    20                                  
    21                                  
    22                                  segment code use32 class=code
    23                                  start:
    24                                      ;(a*b-2*c*d)
    25 00000000 B800000000                  mov eax,0
    26 00000005 A0[00000000]                mov al,[a]
    27 0000000A BB00000000                  mov ebx,0
    28 0000000F 8A1D[01000000]              mov bl,[b]
    29 00000015 F6EB                        imul bl ;ax=a*b
    30 00000017 98                          cwde
    31 00000018 A3[0E000000]                mov[y],eax
    32                                      ;
    33 0000001D B800000000                  mov eax,0
    34 00000022 A0[02000000]                mov al,[c]
    35 00000027 F62D[03000000]              imul byte[d];ax=c*d
    36 0000002D BB00000000                  mov ebx,0
    37 00000032 66BB0200                    mov bx,2
    38 00000036 66F7EB                      imul bx;dx:ax=2*c*d
    39 00000039 6652                        push dx
    40 0000003B 6650                        push ax
    41 0000003D 58                          pop eax
    42 0000003E 2905[0E000000]              sub[y],eax
    43                                      ;(c-e)
    44 00000044 B800000000                  mov eax,0
    45 00000049 A0[02000000]                mov al,[c]
    46 0000004E 6698                        cbw
    47 00000050 662B05[04000000]            sub ax,[e]
    48                                      ;(a*b-2*c*d)/(c-e)
    49 00000057 BB00000000                  mov ebx,0
    50 0000005C 6689C3                      mov bx,ax
    51 0000005F A1[0E000000]                mov eax,[y]
    52 00000064 66F7FB                      idiv bx;ax catul, dx restul
    53 00000067 98                          cwde
    54 00000068 A3[0E000000]                mov[y],eax
    55                                      ;+x/a
    56 0000006D B800000000                  mov eax,0
    57 00000072 A0[00000000]                mov al,[a]
    58 00000077 6698                        cbw
    59 00000079 98                          cwde
    60 0000007A 89C3                        mov ebx,eax
    61 0000007C A1[06000000]                mov eax,dword[x]
    62 00000081 8B15[0A000000]              mov edx,dword[x+4]
    63 00000087 F7FB                        idiv ebx;eax catul si edx restul
    64 00000089 0105[0E000000]              add[y],eax
    65                                      
    66                                  
    67 0000008F 6A00                        push dword 0 
    68 00000091 FF15[00000000]              call [exit]
